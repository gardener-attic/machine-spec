syntax = "proto3";
package cmi.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";

option go_package = "cmi";

extend google.protobuf.FieldOptions {
  bool cmi_secret = 1059;
}

                              //---------  Machine Controller -------//

service Machine {
  // CreateMachine is the gRPC call to create a machine.
  // This method is REQUIRED.
  rpc CreateMachine (CreateMachineRequest)
    returns (CreateMachineResponse) {}

  // DeleteMachine is the gRPC call to delete a machine.
  // This method is REQUIRED.
  rpc DeleteMachine (DeleteMachineRequest)
    returns (DeleteMachineResponse) {}

  // GetMachine is the gRPC call to get the status of a machine.
  // This method is REQUIRED.
  rpc GetMachine (GetMachineRequest)
    returns (GetMachineResponse) {}

  // ListMachines is the gRPC call to list machines backed by the providerSpec.
  // This method is REQUIRED.
  rpc ListMachines (ListMachinesRequest)
    returns (ListMachinesResponse) {}

  // GetListOfVolumeIDsForExistingPVs() is the gRPC call to list VolumeIDs (if exists) for PVs provided by PVSpecList.
  // This method is REQUIRED.
  rpc GetListOfVolumeIDsForExistingPVs(GetListOfVolumeIDsForExistingPVsRequest)
  returns (GetListOfVolumeIDsForExistingPVsResponse) {}

  // ShutDownMachine is the gRPC call to shutdown/power-off a machine.
  // This method is OPTIONAL.
  rpc ShutDownMachine (ShutDownMachineRequest)
    returns (ShutDownMachineResponse) {}

  // ControllerGetCapabilities specifies the set of capabilties enabled to the controller.
  // This method is OPTIONAL.
  rpc ControllerGetCapabilities (ControllerGetCapabilitiesRequest)
    returns (ControllerGetCapabilitiesResponse) {}
}

message CreateMachineRequest {
  // Name is the name of the machine to be created by driver.
  // This field is REQUIRED.
  string Name = 1;

  // ProviderSpec is the configuration needed to create a machine in bytes.
  // Driver should parse this raw data into pre-defined spec in their respective projects.
  // This field is REQUIRED.
  bytes ProviderSpec = 2;

  // Secrets is the map containing necessary credentials for cloud-provider to create the machine.
  // This field is OPTIONAL.
  map<string, bytes> Secrets = 3 [(cmi_secret) = true];
}

message CreateMachineResponse {
  // MachineID is the unique identification of the VM at the cloud provider.
  // This could be the same/different from req.Name.
  // MachineID typically matches with the node.Spec.ProviderID on the node object.
  // Eg: gce://project-name/region/vm-machineID
  // This field is REQUIRED.
  string MachineID = 1;

  // NodeName is the name of the node-object registered to kubernetes.
  // This field is REQUIRED.
  string NodeName = 2;
}

message DeleteMachineRequest {
  // MachineID is the id of the machine to be deleted.
  // It should uniquely identify the real machine in cloud-provider.
  // This field is REQUIRED.
  string MachineID = 1;

  // Secrets is the map containing necessary credentials for cloud-provider to delete the machine.
  // This field is OPTIONAL.
  map<string, bytes> Secrets = 2 [(cmi_secret) = true];
}

message DeleteMachineResponse {
  // Intentionally empty.
}

message GetMachineRequest {
  // MachineID is the id of the machine whose status is to be determined.
  // It should uniquely identify the real machine in cloud-provider.
  // This field is REQUIRED.
  string MachineID = 1;

  // Secrets is the map containing necessary credentials for cloud-provider to list the machines.
  // This field is OPTIONAL.
  map<string, bytes> Secrets = 2 [(cmi_secret) = true];
}

message GetMachineResponse {
  // Exists tells if the machine exists on the cloud provider
  // This field is REQUIRED.
  bool Exists = 1;

  // Status contains the possible status for machines running on the cloud
  enum Status {
    Unknown = 0;
    Running = 1;
    Stopped = 2;
  }
  Status MachineStatus = 2;
}

message ListMachinesRequest {
  // ProviderSpec is the configuration needed to list machines.
  // Driver should parse this raw data into pre-defined spec in their respective projects.
  // This field is REQUIRED.
  bytes ProviderSpec = 1;

  // Secrets is the map containing necessary credentials for cloud-provider to list the machines.
  // This field is OPTIONAL.
  map<string, bytes> Secrets = 2 [(cmi_secret) = true];
}

message ListMachinesResponse {
  // MachineList is the map of list of machines. Format for the map should be map<MachineID, MachineName>.
  // This field is REQUIRED.
  map<string, string> MachineList = 1;
}

message ShutDownMachineRequest {
  // MachineID is the id of the machine to be shut-down.
  // It should uniquely identify the real machine in cloud-provider.
  // This field is REQUIRED.
  string MachineID = 1;

  // Secrets is the map containing necessary credentials for cloud-provider to delete the machine.
  // This field is OPTIONAL.
  map<string, bytes> Secrets = 2 [(cmi_secret) = true];
}

message ShutDownMachineResponse {
  // Intentionally empty.
}

message GetListOfVolumeIDsForExistingPVsRequest{
  // PVSpecsList is a list PV specs for whom volume-IDs are required
  // Driver should parse this raw data into pre-defined list of PVSpecs
  // This field is REQUIRED.
  bytes PVSpecList = 1;
}

message GetListOfVolumeIDsForExistingPVsResponse{
  // VolumeIDs is a list of VolumeIDs.
  // This field is REQUIRED.
  repeated string VolumeIDs = 1;
}

// TODO[hardikdr]: Make use of this field.
message ControllerGetCapabilitiesRequest {
  // Empty for now
}

// TODO[hardikdr]: Make use of this field.
message ControllerGetCapabilitiesResponse {
  // Empty for now
}

                              //---------  Identity Controller -------//

service Identity {
  rpc GetPluginInfo(GetPluginInfoRequest)
    returns (GetPluginInfoResponse) {}

  rpc GetPluginCapabilities(GetPluginCapabilitiesRequest)
    returns (GetPluginCapabilitiesResponse) {}

  rpc Probe (ProbeRequest)
    returns (ProbeResponse) {}
}

message GetPluginInfoRequest {
  // Intentionally empty.
}

message GetPluginInfoResponse {
  // The name MUST follow domain name notation format
  // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
  // include the plugin's host company name and the plugin name,
  // to minimize the possibility of collisions. It MUST be 63
  // characters or less, beginning and ending with an alphanumeric
  // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
  // alphanumerics between. This field is REQUIRED.
  string name = 1;

  // This field is REQUIRED. Value of this field is opaque to the CO.
  string vendor_version = 2;

  // This field is OPTIONAL. Values are opaque to the CO.
  map<string, string> manifest = 3;
}

message GetPluginCapabilitiesRequest {
  // Intentionally empty.
}

message GetPluginCapabilitiesResponse {
  // All the capabilities that the controller service supports. This
  // field is OPTIONAL.
  repeated PluginCapability capabilities = 1;
}

// Specifies a capability of the plugin.
message PluginCapability {
  message Service {
    enum Type {
      UNKNOWN = 0;

      CONTROLLER_SERVICE = 1;
    }
    Type type = 1;
  }

  oneof type {
    // Service that the plugin supports.
    Service service = 1;
  }
}

message ProbeRequest {
  // Intentionally empty.
}

message ProbeResponse {
  .google.protobuf.BoolValue ready = 1;
}
