syntax = "proto3";
package cmi.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";

option go_package = "cmi";

extend google.protobuf.FieldOptions {
    bool cmi_secret = 1059;
}

//---------  Identity Service -------//

service Identity {
    // GetPluginInfo returns basic details about the plugin
    // This method is REQUIRED.
    rpc GetPluginInfo(GetPluginInfoRequest)
        returns (GetPluginInfoResponse) {}

    // GetPluginCapabilities returns the set of capabilities for the plugin
    // This method is REQUIRED.
    rpc GetPluginCapabilities(GetPluginCapabilitiesRequest)
        returns (GetPluginCapabilitiesResponse) {}

    // Probe returns the status of the plugin
    // This method is REQUIRED.
    rpc Probe (ProbeRequest)
        returns (ProbeResponse) {}
}

message GetPluginInfoRequest {
    // Intentionally empty.
}

message GetPluginInfoResponse {
    // The name MUST follow domain name notation format
    // (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
    // include the plugin's host company name and the plugin name,
    // to minimize the possibility of collisions. It MUST be 63
    // characters or less, beginning and ending with an alphanumeric
    // character ([a-z0-9A-Z]) with dashes (-), dots (.), and
    // alphanumerics between.
    // This field is REQUIRED.
    string name = 1;

    // The version specifies the plugin version
    // Value of this field is opaque to the CMI-Client.
    // This field is REQUIRED.
    string version = 2;

    // manifest contains a map of key-value pairs to pass
    // any additonal information about the plugin.
    // Values are opaque to the CMI-Client.
    // This field is OPTIONAL.
    map<string, string> manifest = 3;
}

message GetPluginCapabilitiesRequest {
    // Intentionally empty.
}

message GetPluginCapabilitiesResponse {
    // All the capabilities that the controller service supports.
    // This field is OPTIONAL.
    repeated PluginCapability capabilities = 1;
}

// Specifies a capability of the CMI-Plugin.
message PluginCapability {
    message RPC {
        enum Type {
            // UNKNOWN is used to specific an capability beyond the set
            // provided below
            UNKNOWN = 0;

            // CREATE_MACHINE tells that the plugin implements the
            // CreateMachine() RPC.
            // Plugin is REQUIRED to provide this capability.
            CREATE_MACHINE = 1;

            // DELETE_MACHINE tells that the plugin implements the
            // DeleteMachine() RPC.
            // Plugin is REQUIRED to provide this capability.
            DELETE_MACHINE = 2;

            // GET_MACHINE_STATUS tells that the plugin implements the
            // GetMachineStatus() RPC
            GET_MACHINE_STATUS = 3;

            // LIST_MACHINES tells that the plugin implements the
            // ListMachines() RPC
            LIST_MACHINES = 4;

            // SHUTDOWN_MACHINE tells that the plugin implements the
            // ShutDownMachine() RPC
            SHUTDOWN_MACHINE = 5;

            // GET_VOLUME_IDS tells if the plugin
            // implements the GetVolumeIDs() RPC
            GET_VOLUME_IDS = 6;
        }
        Type type = 1;
    }
    oneof type {
        // RPC that the plugin supports.
        RPC rpc = 1;
    }
}

message ProbeRequest {
    // Intentionally empty.
}

message ProbeResponse {
    // Readiness allows a plugin to report its initialization status back
    // to the CMI-Client. Initialization for some plugins MAY be time consuming
    // and it is important for a CMI-Client to distinguish between the following
    // cases:
    //
    // 1) The plugin is in an unhealthy state and MAY need restarting. In
    //    this case a gRPC error code SHALL be returned.
    // 2) The plugin is still initializing, but is otherwise perfectly
    //    healthy. In this case a successful response SHALL be returned
    //    with a readiness value of `false`. Calls to the plugin's
    //    Machine services MAY fail due to an incomplete
    //    initialization state.
    // 3) The plugin has finished initializing and is ready to service
    //    calls to its Machine services. A successful
    //    response is returned with a readiness value of `true`.
    //
    // This field is OPTIONAL. If not present, the caller SHALL assume
    // that the plugin is in a ready state and is accepting calls to its
    // Machine services (according to the plugin's reported
    // capabilities).
    .google.protobuf.BoolValue ready = 1;
}

//---------  Machine Service -------//

service Machine {
    // CreateMachine is the gRPC call to create a machine.
    // This method is REQUIRED.
    rpc CreateMachine (CreateMachineRequest)
        returns (CreateMachineResponse) {}

    // DeleteMachine is the gRPC call to delete a machine.
    // This method is REQUIRED.
    rpc DeleteMachine (DeleteMachineRequest)
        returns (DeleteMachineResponse) {}

    // GetMachineStatus is the gRPC call to get the status of a machine.
    // This method is OPTIONAL.
    rpc GetMachineStatus (GetMachineStatusRequest)
        returns (GetMachineStatusResponse) {}

    // ListMachines is the gRPC call to list machines backed by the providerSpec.
    // This method is OPTIONAL.
    rpc ListMachines (ListMachinesRequest)
    returns (ListMachinesResponse) {}

    // ShutDownMachine is the gRPC call to shutdown/power-off a machine.
    // This method is OPTIONAL.
    rpc ShutDownMachine (ShutDownMachineRequest)
    returns (ShutDownMachineResponse) {}

    // GetVolumeIDs() is the gRPC call to list VolumeIDs
    // (if exists) for PVs provided by PVSpecList.
    // This method is OPTIONAL.
    rpc GetVolumeIDs(GetVolumeIDsRequest)
        returns (GetVolumeIDsResponse) {}
}

message CreateMachineRequest {
    // MachineName is the name of the machine object CRD for whom a VM is to be created.
    // This field is REQUIRED.
    string MachineName = 1;

    // ProviderSpec is the configuration needed to create a machine in bytes.
    // Plugin should parse this raw data into pre-defined spec in their respective projects.
    // This field is REQUIRED.
    bytes ProviderSpec = 2;

    // Secrets is the map containing necessary credentials for cloud-provider to create the machine.
    // This field is OPTIONAL.
    map<string, bytes> Secrets = 3 [(cmi_secret) = true];

    // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be used by the plugin to recover from the last execution/error state.
    // Plugin should parse this raw data into it's desired format.
    // This field is OPTIONAL.
    bytes LastKnownState = 4;
}

message CreateMachineResponse {
    // ProviderID is the unique identification of the VM at the cloud provider.
    // This could be the same/different from req.Name.
    // ProviderID typically matches with the node.Spec.ProviderID on the node object.
    // Eg: gce://project-name/region/vm-ID
    // This field is REQUIRED.
    string ProviderID = 1;

    // NodeName is the name of the node-object registered to kubernetes.
    // This field is REQUIRED.
    string NodeName = 2;

     // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be the final state of the executing call.
    // Could be used by the plugin to recover from the current execution/error state in any future calls.
    // Plugin should return a raw bytes string.
    // This field is OPTIONAL.
    bytes LastKnownState = 3;
}

message DeleteMachineRequest {
    // MachineName is the name of the machine object for which a VM is to be deleted.
    // This field is REQUIRED.
    string MachineName = 1;

    // ProviderSpec is needed to filter VMs based a cluster before deleting.
    // Plugin should parse this raw data into pre-defined spec in their respective projects.
    // This field is REQUIRED.
    bytes ProviderSpec = 2;

    // Secrets is the map containing necessary credentials for cloud-provider to delete the machine.
    // This field is OPTIONAL.
    map<string, bytes> Secrets = 3 [(cmi_secret) = true];

    // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be used by the plugin to recover from the last execution/error state.
    // Plugin should parse this raw data into it's desired format.
    // This field is OPTIONAL.
    bytes LastKnownState = 4;
}

message DeleteMachineResponse {
    // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be the final state of the executing call.
    // Could be used by the plugin to recover from the current execution/error state in any future calls.
    // Plugin should return a raw bytes string.
    // This field is OPTIONAL.
    bytes LastKnownState = 1;
}

message GetMachineStatusRequest {
    // MachineName is name of the machine object from which the VM is to be identified.
    // The plugin is responsible to issuing a get call for a VM backed by this machine name.
    // This field is REQUIRED.
    string MachineName = 1;

    // ProviderSpec is needed to filter VMs based a cluster before getting the status.
    // Plugin should parse this raw data into pre-defined spec in their respective projects.
    // This field is REQUIRED.
    bytes ProviderSpec = 2;

    // Secrets is the map containing necessary credentials for cloud-provider to list the machines.
    // This field is OPTIONAL.
    map<string, bytes> Secrets = 3 [(cmi_secret) = true];
}

message GetMachineStatusResponse {
    // ProviderID is the unique identification of the VM at the cloud provider.
    // This could be the same/different from req.Name.
    // ProviderID typically matches with the node.Spec.ProviderID on the node object.
    // Eg: gce://project-name/region/vm-ID
    // This field is REQUIRED.
    string ProviderID = 1;

    // NodeName is the name of the node-object registered to kubernetes.
    // This field is REQUIRED.
    string NodeName = 2;
}

message ListMachinesRequest {
    // ProviderSpec is the configuration needed to list machines.
    // Plugin should parse this raw data into pre-defined spec in their respective projects.
    // This field is REQUIRED.
    bytes ProviderSpec = 1;

    // Secrets is the map containing necessary credentials for cloud-provider to list the machines.
    // This field is OPTIONAL.
    map<string, bytes> Secrets = 2 [(cmi_secret) = true];
}

message ListMachinesResponse {
    // MachineList is the map of list of machines. Format for the map should be map<ProviderID, MachineName>.
    // This field is REQUIRED.
    map<string, string> MachineList = 1;
}

message ShutDownMachineRequest {
    // MachineName is the machine object name for whose VM, the shutdown call is to be invoked.
    // The plugin is responsible to issuing a shutdown call for a VM backed by this machine name.
    // This field is REQUIRED.
    string MachineName = 1;

    // ProviderSpec is needed to filter VMs based a cluster before shutting down.
    // Plugin should parse this raw data into pre-defined spec in their respective projects.
    // This field is REQUIRED.
    bytes ProviderSpec = 2;

    // Secrets is the map containing necessary credentials for cloud-provider to shut down the machine.
    // This field is OPTIONAL.
    map<string, bytes> Secrets = 3 [(cmi_secret) = true];

    // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be used by the plugin to recover from the last execution/error state.
    // Plugin should parse this raw data into it's desired format.
    // This field is OPTIONAL.
    bytes LastKnownState = 4;
}

message ShutDownMachineResponse {
    // LastKnownState is any additional information (if required) that can used by the plugin.
    // It can be the final state of the executing call.
    // Could be used by the plugin to recover from the current execution/error state in any future calls.
    // Plugin should return a raw bytes string.
    // This field is OPTIONAL.
    bytes LastKnownState = 1;
}

message GetVolumeIDsRequest{
    // PVSpecsList is a list of PV specs for whom volume-IDs are required
    // Plugin should parse this raw data into pre-defined list of PVSpecs
    // This field is REQUIRED.
    bytes PVSpecList = 1;
}

message GetVolumeIDsResponse{
    // VolumeIDs is a list of VolumeIDs.
    // This field is REQUIRED.
    repeated string VolumeIDs = 1;
}
